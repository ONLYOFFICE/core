#ifndef HWPRECORDTYPES_H
#define HWPRECORDTYPES_H

namespace HWP
{
enum class ELineStyle1
{
	SOLID,
	DASH,
	DOT,
	DASH_DOT,
	DASH_DOT_DOT,
	LONG_DASH,
	CIRCLE,
	DOUBLE_SLIM,
	SLIM_THICK,
	THICK_SLIM,
	SLIM_THICK_SLIM,
	WAVE,
	DOUBLE_WAVE,
	THICK_3D,
	THICK_3D_REVERS_LI,
	SOLID_3D,
	SOLID_3D_REVERS_LI
};

enum class ELineStyle2
{
	NONE,
	SOLID,
	DASH,
	DOT,
	DASH_DOT,
	DASH_DOT_DOT,
	LONG_DASH,
	CIRCLE,
	DOUBLE_SLIM,
	SLIM_THICK,
	THICK_SLIM,
	SLIM_THICK_SLIM
};

enum class ENumberShape1
{
	DIGIT,
	CIRCLE_DIGIT,
	ROMAN_CAPITAL,
	ROMAN_SMALL,
	LATIN_CAPITAL,
	LATIN_SMALL,
	CIRCLED_LATIN_CAPITAL,
	CIRCLED_LATIN_SMALL,
	HANGLE_SYLLABLE,
	CIRCLED_HANGUL_SYLLABLE,
	HANGUL_JAMO,
	CIRCLED_HANGUL_JAMO,
	HANGUL_PHONETIC,
	IDEOGRAPH,
	CIRCLED_IDEOGRAPH
};

enum class ENumberShape2
{
	DIGIT,
	CIRCLE_DIGIT,
	ROMAN_CAPITAL,
	ROMAN_SMALL,
	LATIN_CAPITAL,
	LATIN_SMALL,
	CIRCLED_LATIN_CAPITAL,
	CIRCLED_LATIN_SMALL,
	HANGLE_SYLLABLE,
	CIRCLED_HANGUL_SYLLABLE,
	HANGUL_JAMO,
	CIRCLED_HANGUL_JAMO,
	HANGUL_PHONETIC,
	IDEOGRAPH,
	CIRCLED_IDEOGRAPH,
	DECAGON_CIRCLE,
	DECAGON_CRICLE_HANGJA,
	SYMBOL = 0x80,
	USER_CHAR = 0x81
};

enum class ELineArrowStyle
{
	NORMAL,
	ARROW,
	SPEAR,
	CONCAVE_ARROW,
	DIAMOND,
	CIRCLE,
	BOX,
	EMPTY_DIAMOND,
	EMPTY_CIRCLE,
	EMPTY_BOX
};

ELineArrowStyle GetLineArrowStyle(int nNum, bool bFill)
{
	switch (nNum)
	{
		case 0: return ELineArrowStyle::NORMAL;
		case 1: return ELineArrowStyle::ARROW;
		case 2: return ELineArrowStyle::SPEAR;
		case 3: return ELineArrowStyle::CONCAVE_ARROW;
		case 4:
		case 7: return bFill ? ELineArrowStyle::DIAMOND : ELineArrowStyle::EMPTY_DIAMOND;
		case 5:
		case 8: return bFill ? ELineArrowStyle::CIRCLE : ELineArrowStyle::EMPTY_CIRCLE;
		case 6:
		case 9: return bFill ? ELineArrowStyle::BOX : ELineArrowStyle::EMPTY_BOX;
		default: return ELineArrowStyle::NORMAL;
	}
}

enum class ELineArrowSize
{
	SMALL_SMALL,
	SMALL_MEDIUM,
	SMALL_LARGE,
	MEDIUM_SMALL,
	MEDIUM_MEDIUM,
	MEDIUM_LARGE,
	LARGE_SMALL,
	LARGE_MEDIUM,
	LARGE_LARGE
};
}

#endif // HWPRECORDTYPES_H
